NETHZ: bfeitknecht

Total Points: 0.24

compile errors: YES
nondeterministic: NO
timeout: NO

testA01: FAIL
testA02: FAIL
testA03: FAIL
testA04: FAIL
testA05: FAIL
testA06: FAIL
testB01: FAIL
testB02: FAIL
testB03: PASS
testB04: FAIL
testB05: FAIL
testC01: FAIL
testC02: FAIL
testC03: FAIL
testC04: FAIL
testC05: FAIL
testD01: FAIL
testD02: FAIL
testD03: FAIL
testD04: FAIL
testD05: FAIL


Folgende Test-Datei wurde f√ºr die Bewertung verwendet:

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;

import org.junit.jupiter.api.Test;

public class ContactTracerGradingTestHS2023 {

    @Test
    public void testA01() {
        ContactTracer tracer = new ContactTracer();
        
        ArrayList<Person> persons = new ArrayList<Person>();
        
        for(int i = 0; i < 5; i++) {
        	persons.add(tracer.createPerson(20+i*5));        
        }

        for(Person person : persons) {
        	assertTrue(person.getUsedIds().isEmpty());
        	assertTrue(person.getSeenIds().isEmpty());
        }
    }

    @Test
    public void testA02() {
        ContactTracer tracer = new ContactTracer();

        Person alice = tracer.createPerson(25);
        Person bob = tracer.createPerson(22);
        Person margret = tracer.createPerson(34);
        Person other = tracer.createPerson(42);

        tracer.registerEncounter(alice, bob);
        tracer.registerEncounter(bob, margret);
        tracer.registerEncounter(bob, other);

        assertNumIdsEquals(3, bob.getUsedIds());
        assertNumIdsEquals(3, bob.getSeenIds());
        
        assertNumIdsEquals(1, alice.getUsedIds());
        assertNumIdsEquals(1, alice.getSeenIds());

        assertNumIdsEquals(1, margret.getUsedIds());
        assertNumIdsEquals(1, margret.getSeenIds());
        
        assertNumIdsEquals(1, other.getUsedIds());
        assertNumIdsEquals(1, other.getUsedIds());

        assertDisjointLists(List.of(alice.getUsedIds(), bob.getUsedIds(), margret.getUsedIds(), other.getUsedIds()));
        assertDisjointLists(List.of(alice.getSeenIds(), bob.getSeenIds(), margret.getSeenIds(), other.getSeenIds()));

        assertTrue(bob.getUsedIds().contains(alice.getSeenIds().get(0)));
        assertTrue(bob.getUsedIds().contains(margret.getSeenIds().get(0)));
        assertTrue(bob.getUsedIds().contains(other.getSeenIds().get(0)));
    }

    @Test
    public void testA03() {
        ContactTracer tracer = new ContactTracer();

        Person alice = tracer.createPerson(25);
        Person bob = tracer.createPerson(31);
        Person margret = tracer.createPerson(29);
        Person other = tracer.createPerson(29);

        tracer.registerEncounter(other, bob);
        tracer.registerEncounter(alice, bob);
        tracer.registerEncounter(bob, margret);

        assertDisjointLists(List.of(alice.getSeenIds(), margret.getUsedIds(), other.getUsedIds()));
        assertDisjointLists(List.of(margret.getSeenIds(), alice.getUsedIds(), other.getUsedIds()));
        assertDisjointLists(List.of(other.getSeenIds(), alice.getUsedIds(), margret.getUsedIds()));
    }
  
    @Test
    public void testA04() {
        Person[] persons = createCompleteGraph(6, 70);

        for (int i = 0; i < 5; ++i) {
            for (int j = i + 1; j < 6; ++j) {
                assertIntersection(persons[i].getUsedIds(), persons[j].getSeenIds(), true);
                assertIntersection(persons[j].getUsedIds(), persons[i].getSeenIds(), true);
            }
        }
    }

    @Test
    public void testA05() {
        ContactTracer tracer = new ContactTracer();

        Person alice = tracer.createPerson(25);
        Person bob = tracer.createPerson(31);
        Person margret = tracer.createPerson(45);

        tracer.registerEncounter(alice, bob);

        assertEquals(1, bob.getUsedIds().size());
        assertEquals(1, bob.getSeenIds().size());
        assertEquals(1, alice.getUsedIds().size());
        assertEquals(1, alice.getSeenIds().size());
        assertTrue(margret.getUsedIds().isEmpty());
        assertTrue(margret.getSeenIds().isEmpty());

        assertDisjointLists(List.of(alice.getUsedIds(), bob.getUsedIds()));

        assertSameIds(alice.getSeenIds(), bob.getUsedIds(), "Alice hat nur Bobs ID gesehen");
        assertSameIds(bob.getSeenIds(), alice.getUsedIds(), "Bob hat nur Alices ID gesehen");        
    }
    
    @Test
    public void testA06() {
        ContactTracer tracer = new ContactTracer();

        Person alice = tracer.createPerson(25);
        Person bob = tracer.createPerson(31);

        tracer.registerEncounter(alice, bob);
        tracer.registerEncounter(alice, bob);
        tracer.registerEncounter(alice, bob);

        assertEquals(3, new HashSet<Integer>(bob.getUsedIds()).size());
        assertEquals(3, new HashSet<Integer>(bob.getSeenIds()).size());
        assertEquals(3, new HashSet<Integer>(alice.getUsedIds()).size());
        assertEquals(3, new HashSet<Integer>(alice.getSeenIds()).size());

        assertDisjointLists(List.of(alice.getUsedIds(), bob.getUsedIds()));

        assertSameIds(alice.getSeenIds(), bob.getUsedIds(), "Alice hat nur Bobs ID gesehen");
        assertSameIds(bob.getSeenIds(), alice.getUsedIds(), "Bob hat nur Alices ID gesehen");        
    }
    
    @Test
    public void testB01() {
        ContactTracer tracer = new ContactTracer();

        Person alice = tracer.createPerson(25);
        Person bob = tracer.createPerson(35);
        Person margret = tracer.createPerson(34);
        Person jane = tracer.createPerson(32);
        Person wayne = tracer.createPerson(29);

        tracer.registerEncounter(alice, bob);
        tracer.registerEncounter(bob, margret);
        tracer.registerEncounter(bob, jane);
        tracer.registerEncounter(alice, wayne);

        alice.setTestsPositively();

        assertNoNotification(alice);
        assertHasHighRisk(bob);
        assertHasHighRisk(wayne);
    }

    @Test
    public void testB02() {
        ContactTracer tracer = new ContactTracer();

        Person alice = tracer.createPerson(21);
        Person bob = tracer.createPerson(22);
        Person margret = tracer.createPerson(21);
        Person charlie = tracer.createPerson(21);
        
        tracer.registerEncounter(alice, bob);
        tracer.registerEncounter(alice, charlie);
        tracer.registerEncounter(bob, margret);
        tracer.registerEncounter(alice, margret);
        tracer.registerEncounter(margret, charlie);

        alice.setTestsPositively();

        assertHasHighRisk(margret);
        assertHasHighRisk(charlie);
    }


    @Test
    public void testB03() {
        ContactTracer tracer = new ContactTracer();

        Person alice = tracer.createPerson(36);
        Person bob = tracer.createPerson(34);
        Person margret = tracer.createPerson(35);
        Person charlie = tracer.createPerson(36);

        tracer.registerEncounter(alice, bob);
        tracer.registerEncounter(bob, margret);
        tracer.registerEncounter(margret, charlie);

        alice.setTestsPositively();

        assertNoNotification(margret);
        assertNoNotification(charlie);
    }

    @Test
    public void testB04() {
        ContactTracer tracer = new ContactTracer();

        Person alice = tracer.createPerson(24);
        Person bob = tracer.createPerson(28);
        Person margret = tracer.createPerson(25);

        tracer.registerEncounter(bob, alice);
        tracer.registerEncounter(margret, alice);

        alice.setTestsPositively();

        assertHasHighRisk(bob);
        assertHasHighRisk(margret);
    }

    @Test
    public void testB05() {
        Person[] persons = createCompleteGraph(7, 35);

        persons[0].setTestsPositively();

        for (int i = 1; i < 7; ++i) {
            assertHasHighRisk(persons[i]);
        }
    }

    @Test
    public void testC01() {
        ContactTracer tracer = new ContactTracer();

        Person alice = tracer.createPerson(20);
        Person bob = tracer.createPerson(30);
        Person margret = tracer.createPerson(30);
        Person anna = tracer.createPerson(30);

        tracer.registerEncounter(alice, bob);
        tracer.registerEncounter(bob, margret);
        tracer.registerEncounter(margret, anna);


        alice.setTestsPositively();

        assertNoNotification(margret);
        assertNoNotification(anna);

        bob.setTestsPositively();

        assertHasHighRisk(margret);
        assertNoNotification(anna);
    }

    @Test
    public void testC02() {
        ContactTracer tracer = new ContactTracer();

        Person root = tracer.createPerson(20);

        ArrayList<Person> level1 = new ArrayList<Person>();
        
        for(int i = 0; i < 4; i++) {
        	Person p = tracer.createPerson(21);
        	level1.add(p);
        	tracer.registerEncounter(root, p);        	
        }
        
        ArrayList<Person> level2 = new ArrayList<Person>();

        int k = 1;
        for(Person p1 : level1) {
        	for(int i = 0; i < k; i++) {
        		Person p2 = tracer.createPerson(19);
        		level2.add(p2);
        		tracer.registerEncounter(p1, p2);
        	}
        	k++;        	
        }
        
        for(Person p : level1) {
        	assertNoNotification(p);
        }
        
        for(Person p : level2) {
        	assertNoNotification(p);
        }

        root.setTestsPositively();
        
        for (Person p : level1) {
            assertHasHighRisk(p);
        }
        for (Person p : level2) {
            assertNoNotification(p);
        }

        for (Person p : level1) {
            p.setTestsPositively();
        }
        
        for (Person p : level2) {
            assertHasHighRisk(p);
        }
    }

    @Test
    public void testC03() {
        ContactTracer tracer = new ContactTracer();

        Person a0 = tracer.createPerson(30);
        Person a = tracer.createPerson(32);
        Person b = tracer.createPerson(33);

        Person c = tracer.createPerson(31);

        Person d = tracer.createPerson(41);
        Person e = tracer.createPerson(45);
        Person e0 = tracer.createPerson(53);
       
        // left to right
        tracer.registerEncounter(a0, a);
        tracer.registerEncounter(a, b);
        tracer.registerEncounter(b, c);

        // right to left
        tracer.registerEncounter(e0, e);
        tracer.registerEncounter(e, d);
        tracer.registerEncounter(d, c);

        a0.setTestsPositively();
        e0.setTestsPositively();
        
        assertNoNotification(c);
        assertHasHighRisk(a);
        assertHasHighRisk(e);
        
        a.setTestsPositively();
        e.setTestsPositively();

        assertNoNotification(c);
        assertHasHighRisk(b);
        assertHasHighRisk(d);
                
        d.setTestsPositively();
        assertHasHighRisk(c);
    }

    @Test
    public void testC04() {
        ContactTracer tracer = new ContactTracer();

        Person a = tracer.createPerson(30);
        Person b = tracer.createPerson(30);
        Person c = tracer.createPerson(30);

        tracer.registerEncounter(a, b);
        tracer.registerEncounter(b, c);

        a.setTestsPositively();

        assertTrue(b.getNotification() != Person.NotificationType.NoNotification);
        
        assertNoNotification(a);
        
        b.setTestsPositively();
        
        assertNoNotification(a);
        assertNoNotification(b);
    }

    @Test
    public void testC05() {
    	ContactTracer tracer = new ContactTracer();
    	Person [] p = new Person[5];
    	
    	p[0] = tracer.createPerson(34);
    	p[1] = tracer.createPerson(22);
    	p[2] = tracer.createPerson(23);
    	p[3] = tracer.createPerson(22);
    	p[4] = tracer.createPerson(21);
    	
    	for(int i = 0; i < 2; i++) {
    		for(int j = i+1; j < p.length; j++) {
    			tracer.registerEncounter(p[i], p[j]);
    		}
    	}    	
    	
    	p[4].setTestsPositively();
    	
    	assertHasHighRisk(p[0]);
    	assertHasHighRisk(p[1]);
    	assertNoNotification(p[2]);
    	assertNoNotification(p[3]);
    	assertNoNotification(p[4]);

    	
    	p[2].setTestsPositively();
    	
    	assertHasHighRisk(p[0]);
    	assertHasHighRisk(p[1]);
    	assertNoNotification(p[2]);
    	assertNoNotification(p[3]);
    	assertNoNotification(p[4]);
    	
    	p[0].setTestsPositively();
    	
    	assertNoNotification(p[0]);
    	assertHasHighRisk(p[1]);
    	assertNoNotification(p[2]);
    	assertHasHighRisk(p[3]);
    	assertNoNotification(p[4]);
    }

    @Test
    public void testD01() {
        ContactTracer tracer = new ContactTracer();

        Person a = tracer.createPerson(31);
        Person b = tracer.createPerson(32);
        Person c = tracer.createPerson(95);
        Person d = tracer.createPerson(96);

        tracer.registerEncounter(a, b);
        tracer.registerEncounter(b, c);
        tracer.registerEncounter(c, d);

        a.setTestsPositively();

        assertHasHighRisk(b);
        assertHasLowRisk(c);
        assertNoNotification(d);
    }
    
    @Test
    public void testD02() {
        ContactTracer tracer = new ContactTracer();

        Person alice = tracer.createPerson(20);
        Person bob = tracer.createPerson(70);
        Person margret = tracer.createPerson(80);
        Person charlie = tracer.createPerson(35);

        tracer.registerEncounter(alice, bob);
        tracer.registerEncounter(bob, margret);
        tracer.registerEncounter(bob, charlie);

        alice.setTestsPositively();

        assertNoNotification(alice);
        assertHasHighRisk(bob);
        assertHasLowRisk(margret);
        assertNoNotification(charlie);
    }

    @Test
    public void testD03() {
        ContactTracer tracer = new ContactTracer();

        Person root = tracer.createPerson(20);

        ArrayList<Person> level1 = new ArrayList<Person>();
        
        for(int i = 0; i < 4; i++) {
        	Person p = null;
        	if(i%2 ==0) {
        		p = tracer.createPerson(21);
        	} else {
        		p = tracer.createPerson(61+i);
        	}
        	level1.add(p);
        	tracer.registerEncounter(root, p);        	
        }
        
        ArrayList<Person> level2 = new ArrayList<Person>();
        ArrayList<Person> level2Elderly = new ArrayList<Person>();


        int k = 1;
        for(Person p1 : level1) {
        	for(int i = 0; i < k; i++) {
        		Person p2 = null;
        		if(k%2 == 0) {
        			p2 = tracer.createPerson(19);
            		level2.add(p2);
        		} else {
        			p2 = tracer.createPerson(76);
        			level2Elderly.add(p2);
        		}
        		tracer.registerEncounter(p1, p2);
        	}
        	k++;        	
        }
        
        for(Person p : level1) {
        	assertNoNotification(p);
        }
        
        for(Person p : level2) {
        	assertNoNotification(p);
        }
        
        for(Person p : level2Elderly) {
        	assertNoNotification(p);
        }

        root.setTestsPositively();
        
        for (Person p : level1) {
            assertHasHighRisk(p);
        }
        
        for (Person p : level2) {
            assertNoNotification(p);
        }  
        
        for (Person  p : level2Elderly) {
        	assertHasLowRisk(p);
        }       
    }

    @Test
    public void testD04() {
    	ContactTracer tracer = new ContactTracer();
    	
        Person root = tracer.createPerson(95);

        ArrayList<Person> level1 = new ArrayList<Person>();
        
        for(int i = 0; i < 5; i++) {
        	Person p = tracer.createPerson(25);
        	level1.add(p);
        	tracer.registerEncounter(root, p);        	
        }
        
        ArrayList<Person> level2 = new ArrayList<Person>();

        for(Person p1 : level1) {
        	for(int i = 0; i < 3; i++) {
        		Person p2 = tracer.createPerson(28);
        		level2.add(p2);
        		tracer.registerEncounter(p1, p2);
        	}
        }
        
        ArrayList<Person> level3 = new ArrayList<Person>();
        
        for(Person p2 : level2) {
        	Person p3 = tracer.createPerson(42);
        	level3.add(p3);
        	tracer.registerEncounter(p2, p3);
        }
        
        assertNoNotification(root);

        level3.get(4).setTestsPositively();
        
        assertNoNotification(root);
        
        level2.get(2).setTestsPositively();
        
        assertHasLowRisk(root);
        
        level1.get(3).setTestsPositively();
        
        assertHasHighRisk(root);
    }
    
    @Test
    public void testD05() {
        ContactTracer tracer = new ContactTracer();
        
        Person b = tracer.createPerson(26);
        Person c = tracer.createPerson(70); //
        Person d = tracer.createPerson(49);
        Person e = tracer.createPerson(19);
        Person f = tracer.createPerson(12);
        Person g = tracer.createPerson(92); //
        Person h = tracer.createPerson(73); //
        
        Person a = tracer.createPerson(65); //

        
        tracer.registerEncounter(a, c);
        tracer.registerEncounter(a, d);
        tracer.registerEncounter(a, b);
        
        tracer.registerEncounter(b, e);
        
        tracer.registerEncounter(c, f);
        
        tracer.registerEncounter(d, g);
        
        tracer.registerEncounter(e, g);
        tracer.registerEncounter(e, h);        
        
        tracer.registerEncounter(f, g);
        
        a.setTestsPositively();
        
        assertNoNotification(a);
        assertHasHighRisk(b);
        assertHasHighRisk(c);
        assertHasHighRisk(d);
        assertNoNotification(e);
        assertNoNotification(f);
        assertHasLowRisk(g);
        assertNoNotification(h);
        
        b.setTestsPositively();
        
        assertNoNotification(a);
        assertNoNotification(b);
        assertHasHighRisk(c);
        assertHasHighRisk(d);
        assertHasHighRisk(e);
        assertNoNotification(f);
        assertHasLowRisk(g);
        assertHasLowRisk(h);
        
        e.setTestsPositively();
        
        assertNoNotification(a);
        assertNoNotification(b);
        assertHasHighRisk(c);
        assertHasHighRisk(d);
        assertNoNotification(e);
        assertNoNotification(f);
        assertHasHighRisk(g);
        assertHasHighRisk(h);
    }

    // Test Utilities

    private static Person[] createCompleteGraph(int size, int age) {
        ContactTracer tracer = new ContactTracer();

        Person[] persons = new Person[size];
        for (int i = 0; i < size; ++i) {
            persons[i] = tracer.createPerson(age);
        }

        for (int i = 0; i < size - 1; ++i) {
            for (int j = i + 1; j < size; ++j) {
                tracer.registerEncounter(persons[i], persons[j]);
            }
        }

        return persons;
    }

    /** Stellt sicher, dass alle IDs in l1 auch in l2 vorkommen und umgekehrt. */
    public static void assertSameIds(List<Integer> l1, List<Integer> l2) {

        assertSameIds(l1, l2, "");
    }

    /** Pr√ºft, dass alle IDs in l1 auch in l2 vorkommen und umgekehrt. */
    public static void assertSameIds(List<Integer> l1, List<Integer> l2, String message) {
        HashSet<Integer> s1 = new HashSet<Integer>(l1);
        HashSet<Integer> s2 = new HashSet<Integer>(l2);

        assertEquals(s1, s2, "Die Liste der IDs " + l1 + " stimmt nicht ueberein mit der Liste der IDs " + l2);
    }

    /** Pr√ºft, dass alle IDs die in den gegebenen Listen vorkommen, einzigartig √ºber alle gegeben Listen hinweg sind. */
    public static void assertDisjointLists(List<List<Integer>> lists) {
        assertDisjointLists(lists, "");
    }

    /** Pr√ºft, dass alle IDs die in den gegebenen Listen vorkommen, einzigartig √ºber alle gegeben Listen hinweg sind. */
    public static void assertDisjointLists(List<List<Integer>> lists, String message) {
        HashSet<Integer> s = new HashSet<Integer>();

        message = message + "Die folgenden Listen sind nicht disjunkt:\n" + getStringRepresentation(lists);

        for (List<Integer> l : lists) {
            HashSet<Integer> listSet = new HashSet<>(l);
            int expectedIncreaseInSize = listSet.size();
            int sizeBefore = s.size();
            s.addAll(listSet);
            assertEquals(sizeBefore + expectedIncreaseInSize, s.size(), message);
        }

    }

    public static String getStringRepresentation(List<List<Integer>> lists) {
        String result = "";
        for(List<Integer> list : lists) {
            result = result + "\n" + list.toString();
        }

        return result;
    }

    private static void assertIntersection(List<Integer> l1, List<Integer> l2, boolean shouldHaveIntersection) {
        HashSet<Integer> s = new HashSet<Integer>(l1);
        s.retainAll(l2);

        if (shouldHaveIntersection) {
            assertFalse(s.isEmpty());
        } else {
            assertTrue(s.isEmpty());
        }
    }

    public static void assertNumIdsEquals(int numIds, List<Integer> ids) {
        var s = new HashSet<>(ids);
        assertEquals(numIds, s.size(), "Expected a total of " + numIds + " unique IDs in list but got " + s.size() + " (unique IDs counted " + s + ")");
    }

    /** Pr√ºft ob die gegebene Person die Benachrichtigungswarnstufe NoNotification hat. */
    public static void assertNoNotification(Person p) {
        assertEquals(Person.NotificationType.NoNotification, p.getNotification(), "Es wurde fuer die Person keine Warnstufe erwartet, aber die Warnstufe ist " + p.getNotification());
    }

    /** Pr√ºft ob die gegebene Person die Benachrichtigungswarnstufe HighRiskNotification hat. */
    public static void assertHasHighRisk(Person p) {
        assertEquals(Person.NotificationType.HighRiskNotification, p.getNotification(), "Es wurde fuer die Person eine High-Risk Warnstufe erwartet, aber die Warnstufe ist " + p.getNotification());
    }

    /** Pr√ºft ob die gegebene Person die Benachrichtigungswarnstufe LowRiskNotification hat. */
    public static void assertHasLowRisk(Person p) {
        assertEquals(Person.NotificationType.LowRiskNotification, p.getNotification(), "Es wurde fuer die Person eine Low-Risk Warnstufe erwartet, aber die Warnstufe ist " + p.getNotification());
    }
}
NETHZ: bfeitknecht

Total Points: 5.00 
Total Percentage: 100%

Nontrivial Tests: 21
Trivial Tests: 0

compile errors: NO
nondeterministic: NO


test01GivenA1: PASS
test02GivenA2: PASS
test03ExampleNumGroups: PASS
test04ExampleGroups: PASS
test05EmptySummary: PASS
test06SingleItemSummary: PASS
test07FilterStrongLevels: PASS
test08FilterStrongLevelsMulti: PASS
test09LevelCmpStrictlyWeaker: PASS
test10LevelCmpSingleElementWeaker: PASS
test11LevelCmpNotWeakerEq: PASS
test12LevelCmpNotWeakerStrictlyGreater: PASS
test13LevelCmpManyLevels: PASS
test14SubsequentKs: PASS
test15KsWithGap: PASS
test16KNonMultipleOf10: PASS
test17KNonMultipleOf10RoundDown: PASS
test18AgeRoundDown: PASS
test19AgeNoRounding: PASS
test20MultiWithRounding: PASS
test21MultiWithRounding2: PASS


Folgende Test-Datei wurde f√ºr die Bewertung verwendet:

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;

import java.util.Map;
import java.util.Set;

import org.junit.jupiter.api.Test;

public class GradingDatabase12Test {
	@Test
	public void test01GivenA1() {
		Database database = new Database();
		ItemFactory factory = database.getItemFactory();
		
		database.add(factory.createItem(new Level(Set.of(1,2)), 1, 20, 100));
		database.add(factory.createItem(new Level(Set.of(2,3)), 2, 31, 109));
		database.add(factory.createItem(new Level(Set.of(5,6)), 3, 50, 100));
		database.add(factory.createItem(new Level(Set.of(4)), 15, 20, 133));
		
		Map<Integer, Integer> res = database.summary(new Level(Set.of(3,5)));
		assertEquals(2, res.size());
		assertEquals(25, res.get(100));
		assertEquals(20, res.get(130));
	}
	
	@Test
	public void test02GivenA2() {
		Database database = new Database();
		ItemFactory factory = database.getItemFactory();
		
		database.add(factory.createItem(new Level(Set.of(1,2)), 0, 22, 100));
		database.add(factory.createItem(new Level(Set.of(2,3)), 1, 31, 109));
		database.add(factory.createItem(new Level(Set.of(1,2)), 2, 20, 52));
		database.add(factory.createItem(new Level(Set.of(4)), 3, 30, 53));
		database.add(factory.createItem(new Level(Set.of(2,3,1)), 4, 40, 53));
		database.add(factory.createItem(new Level(Set.of(2,3,1)), 5, 40, 9));
		database.add(factory.createItem(new Level(Set.of(6)), 6, 50, 100));
		
		Map<Integer, Integer> res = database.summary(new Level(Set.of(3,5)));
		assertEquals(3, res.size());
		assertEquals(40, res.get(0));
		assertEquals(30, res.get(50));
		assertEquals(26, res.get(100));
	}
	
	@Test
	public void test03ExampleNumGroups() {
		Database d = new Database();
		ItemFactory f = d.getItemFactory();
		d.add(f.createItem(new Level(Set.of(1,2)), 1, 20, 100));
		d.add(f.createItem(new Level(Set.of(2,3)), 2, 31, 109));
		d.add(f.createItem(new Level(Set.of(5,6)), 3, 50, 100));
		d.add(f.createItem(new Level(Set.of(4)), 15, 20, 133));
		
		Map<Integer, Integer> res = d.summary(new Level(Set.of(3,5)));
		
		assertEquals(2, res.size());
	}
	
	@Test
	public void test04ExampleGroups() {
		Database d = new Database();
		ItemFactory f = d.getItemFactory();
		d.add(f.createItem(new Level(Set.of(1,2)), 1, 20, 100));
		d.add(f.createItem(new Level(Set.of(2,3)), 2, 31, 109));
		d.add(f.createItem(new Level(Set.of(5,6)), 3, 50, 100));
		d.add(f.createItem(new Level(Set.of(4)), 15, 20, 133));
		
		Map<Integer, Integer> res = d.summary(new Level(Set.of(3,5)));
		
		assertEquals(25, res.get(100));
		assertEquals(20, res.get(130));
	}
	
	@Test
	public void test05EmptySummary() {
		Database d = new Database();
		
		Map<Integer, Integer> res = d.summary(new Level(Set.of(3,5)));
		
		assertEquals(0, res.size());
	}
	
	@Test
	public void test06SingleItemSummary() {
		Database d = new Database();
		ItemFactory f = d.getItemFactory();
		d.add(f.createItem(new Level(Set.of(1,2)), 1, 20, 100));
		
		Map<Integer, Integer> res = d.summary(new Level(Set.of(3,5)));
		
		assertEquals(1, res.size());
		assertEquals(20, res.get(100));
	}
	
	@Test
	public void test07FilterStrongLevels() {
		Database d = new Database();
		ItemFactory f = d.getItemFactory();
		d.add(f.createItem(new Level(Set.of(10)), 1, 20, 100));
		
		Map<Integer, Integer> res = d.summary(new Level(Set.of(1)));
		
        // level des einzigen Items ist zu hoch
		assertEquals(0, res.size());
	}
	
	@Test
	public void test08FilterStrongLevelsMulti() {
		Database d = new Database();
		ItemFactory f = d.getItemFactory();
		d.add(f.createItem(new Level(Set.of(8)), 1, 20, 100));
		d.add(f.createItem(new Level(Set.of(9)), 2, 30, 100));
		d.add(f.createItem(new Level(Set.of(10)), 3, 40, 100));
		
		d.add(f.createItem(new Level(Set.of(8)), 4, 30, 110));
		d.add(f.createItem(new Level(Set.of(9)), 5, 40, 110));
		d.add(f.createItem(new Level(Set.of(10)), 6, 50, 110));
		
		Map<Integer, Integer> res = d.summary(new Level(Set.of(9)));
		
        // nur Items 1 und 2 sollten beinhaltet sein
		assertEquals(2, res.size());
		assertEquals(20, res.get(100));
		assertEquals(30, res.get(110));	
	}
	
	@Test
	public void test09LevelCmpStrictlyWeaker() {
		Database d = new Database();
		ItemFactory f = d.getItemFactory();
		d.add(f.createItem(new Level(Set.of(1,2,3,4)), 1, 20, 100));
		
		Map<Integer, Integer> res = d.summary(new Level(Set.of(5,6,7,8,9,10)));
		
		assertEquals(1, res.size());
	}
	
	@Test
	public void test10LevelCmpSingleElementWeaker() {
		Database d = new Database();
		ItemFactory f = d.getItemFactory();
		d.add(f.createItem(new Level(Set.of(1,2,3,4)), 1, 20, 100));
		
		Map<Integer, Integer> res = d.summary(new Level(Set.of(1,2,3,4,5)));
		
		assertEquals(1, res.size());
	}
	
	@Test
	public void test11LevelCmpNotWeakerEq() {
		Database d = new Database();
		ItemFactory f = d.getItemFactory();
		d.add(f.createItem(new Level(Set.of(1,2,3,4)), 1, 20, 100));
		
		Map<Integer, Integer> res = d.summary(new Level(Set.of(1,2,3,4)));
		
		assertEquals(0, res.size());
	}
	
	@Test
	public void test12LevelCmpNotWeakerStrictlyGreater() {
		Database d = new Database();
		ItemFactory f = d.getItemFactory();
		d.add(f.createItem(new Level(Set.of(10)), 1, 20, 100));
		
		Map<Integer, Integer> res = d.summary(new Level(Set.of(1,2,3,4)));
		
		assertEquals(0, res.size());
	}
	
	@Test
	public void test13LevelCmpManyLevels() {
		Database d = new Database();
		ItemFactory f = d.getItemFactory();
		d.add(f.createItem(new Level(Set.of(1,2,3,4,5,6,7,8,9,10)), 1, 20, 100));
		
		Map<Integer, Integer> res = d.summary(new Level(Set.of(1,2,3,4,5,6,7,8,9,10,11)));
		
		assertEquals(1, res.size());
	}
	
	@Test
	public void test14SubsequentKs() {
		Database d = new Database();
		ItemFactory f = d.getItemFactory();
		d.add(f.createItem(new Level(Set.of(1)), 1, 10, 10));
		d.add(f.createItem(new Level(Set.of(1)), 2, 20, 20));
		d.add(f.createItem(new Level(Set.of(1)), 3, 30, 30));
		d.add(f.createItem(new Level(Set.of(1)), 4, 40, 40));
		
		Map<Integer, Integer> res = d.summary(new Level(Set.of(2)));
		
		assertEquals(4, res.size());
		assertEquals(10, res.get(10));
		assertEquals(20, res.get(20));
		assertEquals(30, res.get(30));
		assertEquals(40, res.get(40));
	}
	
	@Test
	public void test15KsWithGap() {
		Database d = new Database();
		ItemFactory f = d.getItemFactory();
		d.add(f.createItem(new Level(Set.of(1)), 1, 10, 10));
		d.add(f.createItem(new Level(Set.of(1)), 2, 20, 100));
		d.add(f.createItem(new Level(Set.of(1)), 3, 30, 200));
		d.add(f.createItem(new Level(Set.of(1)), 4, 40, 300));
		
		Map<Integer, Integer> res = d.summary(new Level(Set.of(2)));
		
		assertEquals(4, res.size());
		assertEquals(10, res.get(10));
		assertEquals(20, res.get(100));
		assertEquals(30, res.get(200));
		assertEquals(40, res.get(300));
	}
	
	@Test
	public void test16KNonMultipleOf10() {
		Database d = new Database();
		ItemFactory f = d.getItemFactory();
		d.add(f.createItem(new Level(Set.of(1)), 1, 10, 10));
		d.add(f.createItem(new Level(Set.of(1)), 2, 10, 11));
		d.add(f.createItem(new Level(Set.of(1)), 3, 10, 12));
		d.add(f.createItem(new Level(Set.of(1)), 4, 10, 13));
		d.add(f.createItem(new Level(Set.of(1)), 4, 10, 14));
		
		
		Map<Integer, Integer> res = d.summary(new Level(Set.of(2)));
		
		assertEquals(1, res.size());
	}
	
	@Test
	public void test17KNonMultipleOf10RoundDown() {
		Database d = new Database();
		ItemFactory f = d.getItemFactory();
		d.add(f.createItem(new Level(Set.of(1)), 1, 10, 10));
		d.add(f.createItem(new Level(Set.of(1)), 2, 10, 15));
		d.add(f.createItem(new Level(Set.of(1)), 3, 10, 16));
		d.add(f.createItem(new Level(Set.of(1)), 4, 10, 17));
		d.add(f.createItem(new Level(Set.of(1)), 4, 10, 18));
		d.add(f.createItem(new Level(Set.of(1)), 4, 10, 19));
		
		
		Map<Integer, Integer> res = d.summary(new Level(Set.of(2)));
		
		// all k s round down to 10
		assertEquals(1, res.size());
	}
	
	@Test
	public void test18AgeRoundDown() {
		Database d = new Database();
		ItemFactory f = d.getItemFactory();
		d.add(f.createItem(new Level(Set.of(1)), 1, 10, 10));
		d.add(f.createItem(new Level(Set.of(1)), 2, 11, 10));
		d.add(f.createItem(new Level(Set.of(1)), 2, 11, 10));
		
		
		Map<Integer, Integer> res = d.summary(new Level(Set.of(2)));
		
		assertEquals(10, res.get(10)); // 10.666 rounds to 10  
	}
	
	@Test
	public void test19AgeNoRounding() {
		Database d = new Database();
		ItemFactory f = d.getItemFactory();
		d.add(f.createItem(new Level(Set.of(1)), 1, 10, 10));
		d.add(f.createItem(new Level(Set.of(1)), 2, 11, 10));
		d.add(f.createItem(new Level(Set.of(1)), 2, 11, 10));
		d.add(f.createItem(new Level(Set.of(1)), 2, 12, 10));
		
		
		Map<Integer, Integer> res = d.summary(new Level(Set.of(2)));
		
		assertEquals(11, res.get(10)); // no rounding required
	}
	
	@Test
	public void test20MultiWithRounding() {
		Database d = new Database();
		ItemFactory f = d.getItemFactory();
		d.add(f.createItem(new Level(Set.of(1)), 1, 10, 10));
		d.add(f.createItem(new Level(Set.of(1)), 3, 11, 10));
		
		d.add(f.createItem(new Level(Set.of(1)), 4, 20, 100));
		d.add(f.createItem(new Level(Set.of(1)), 5, 21, 100));
		
		d.add(f.createItem(new Level(Set.of(1)), 6, 30, 200));
		d.add(f.createItem(new Level(Set.of(1)), 7, 31, 200));
		
		d.add(f.createItem(new Level(Set.of(1)), 8, 40, 300));
		d.add(f.createItem(new Level(Set.of(1)), 9, 41, 300));
		
		Map<Integer, Integer> res = d.summary(new Level(Set.of(2)));
		
		// all ages
		assertEquals(4, res.size());
		assertEquals(10, res.get(10));
		assertEquals(20, res.get(100));
		assertEquals(30, res.get(200));
		assertEquals(40, res.get(300));
	}
	
	@Test
	public void test21MultiWithRounding2() {
		Database d = new Database();
		ItemFactory f = d.getItemFactory();
		d.add(f.createItem(new Level(Set.of(1)), 1, 10, 10));
		d.add(f.createItem(new Level(Set.of(1)), 3, 11, 11));
		
		d.add(f.createItem(new Level(Set.of(1)), 4, 20, 100));
		d.add(f.createItem(new Level(Set.of(1)), 5, 21, 101));
		
		d.add(f.createItem(new Level(Set.of(1)), 6, 30, 200));
		d.add(f.createItem(new Level(Set.of(1)), 7, 31, 201));
		
		d.add(f.createItem(new Level(Set.of(1)), 8, 40, 300));
		d.add(f.createItem(new Level(Set.of(1)), 9, 41, 301));
		
		Map<Integer, Integer> res = d.summary(new Level(Set.of(2)));
		
		// all ages *and* health values round down
		assertEquals(4, res.size());
		assertEquals(10, res.get(10));
		assertEquals(20, res.get(100));
		assertEquals(30, res.get(200));
		assertEquals(40, res.get(300));
	}
}
NETHZ: bfeitknecht
Total Percentage: 3.75

Nontrivial Tests: 1


timeout: NO

test02_SimpleOneTarifOnePriceOneId: FAIL
test03_ConditionalOnlyTarifNoIdTest: PASS
test04_SimpleOneTarifTwoPriceOneId: PASS
test05_SimpleOneTarifThreePriceOneId: PASS
test06_SimpleOneTarifThreePriceTwoId: PASS
test07_SimpleOneTarifThreePriceTwoIdMultiQuartal: PASS
test08_SimpleCorrectRoundingUpTest: FAIL
test09_SimpleCorrectRoundingDownTest: PASS
test10_AllRoundToZeroTest: FAIL
test11_RoundingNotTooEarly: FAIL
test12_SimpleCorrectRoundingClearUpTest: PASS
test13_GeneralMultiTest_1: PASS
test14_MultiTarifTest: PASS
test15_BigZeroCostTarifTest: PASS
test16_TarifTarifBig: FAIL
test17_TarifAllFree: PASS
test18_OneTarifQuartersHitIntervals: PASS
test19_OneTarifQuartersNearlyHitIntervals: PASS
test20_PiBill: PASS


Grading Hinweis: Der 'Trivial' Test test03_ConditionalOnlyTarifNoIdTest wird nur als 'bestanden' gezaehlt, wenn mindestens ein 
'Nontrivial' Test bestanden wurde.

Folgende Test-Datei wurde f√ºr die Bewertung verwendet:

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;

import java.io.ByteArrayOutputStream;
import java.io.PrintStream;
import java.util.Scanner;

import org.junit.jupiter.api.Test;

public class GradingBillsTest {

	@Test
	public void test01_GivenTest(){
		String s = "Tarif 4 1 1000 100 10 1000 5 100000 20\n" + "345 0 0 0 0\n" + "346 0 0 0 1\n" + "456 0 0 0 51\n"
				+ "789 0 0 0 100\n" + "110 0 0 0 101\n" + "109 0 0 0 112\n" + "111 0 0 0 1099\n" + "112 0 0 0 1100\n"
				+ "113 0 0 0 1101\n" + "114 0 0 0 1102\n" + "Tarif 1 100000 30\n" + "116 0 0 0 2000\n"
				+ "Tarif 2 1000 10 100000 30\n" + "117 0 0 0 2000\n" + "Tarif 3 100 40 1000 10 100000 30\n"
				+ "118 0 0 0 2000";

		Scanner input = new Scanner(s);
		ByteArrayOutputStream outputba = new ByteArrayOutputStream();
		PrintStream output = new PrintStream(outputba);
		Bills.process(input, output);
		input.close();
		output.close();

		Scanner scanner = new Scanner(outputba.toString());

		assertTrue(scanner.hasNextLine());
		assertEquals("345 0", scanner.nextLine());

		assertTrue(scanner.hasNextLine());
		assertEquals("346 10", scanner.nextLine());

		assertTrue(scanner.hasNextLine());
		assertEquals("456 15", scanner.nextLine());

		assertTrue(scanner.hasNextLine());
		assertEquals("789 20", scanner.nextLine());

		assertTrue(scanner.hasNextLine());
		assertEquals("110 20", scanner.nextLine());

		assertTrue(scanner.hasNextLine());
		assertEquals("109 21", scanner.nextLine());

		assertTrue(scanner.hasNextLine());
		assertEquals("111 70", scanner.nextLine());

		assertTrue(scanner.hasNextLine());
		assertEquals("112 70", scanner.nextLine());

		assertTrue(scanner.hasNextLine());
		assertEquals("113 70", scanner.nextLine());

		assertTrue(scanner.hasNextLine());
		assertEquals("114 70", scanner.nextLine());

		assertTrue(scanner.hasNextLine());
		assertEquals("116 600", scanner.nextLine());

		assertTrue(scanner.hasNextLine());
		assertEquals("117 400", scanner.nextLine());

		assertTrue(scanner.hasNextLine());
		assertEquals("118 410", scanner.nextLine());
		assertFalse(scanner.hasNextLine());

		scanner.close();
	}

	@Test
	public void test02_SimpleOneTarifOnePriceOneId() {
		String s = "Tarif 1 100000 10 \n1 0 0 0 100";
		Scanner input = new Scanner(s);
		ByteArrayOutputStream outputba = new ByteArrayOutputStream();
		PrintStream output = new PrintStream(outputba);
		Bills.process(input, output);
		input.close();
		output.close();

		Scanner scanner = new Scanner(outputba.toString());
		assertTrue(scanner.hasNextLine());
		assertEquals("1 10", scanner.nextLine());
		assertFalse(scanner.hasNextLine());
	}
	 
	@Test
	public void test03_ConditionalOnlyTarifNoIdTest() {
		String s = "Tarif 1 100000 10";
		Scanner input = new Scanner(s);
		ByteArrayOutputStream outputba = new ByteArrayOutputStream();
		PrintStream output = new PrintStream(outputba);
		Bills.process(input, output);
		input.close();
		output.close();

		Scanner scanner = new Scanner(outputba.toString());
		assertFalse(scanner.hasNextLine());
	}

	@Test
	public void test04_SimpleOneTarifTwoPriceOneId() {
		String s = "Tarif 2 100 5 100000 10 \n1 0 0 0 2000";
		Scanner input = new Scanner(s);
		ByteArrayOutputStream outputba = new ByteArrayOutputStream();
		PrintStream output = new PrintStream(outputba);
		Bills.process(input, output);
		input.close();
		output.close();

		Scanner scanner = new Scanner(outputba.toString());
		assertTrue(scanner.hasNextLine());
		assertEquals("1 195", scanner.nextLine());
		assertFalse(scanner.hasNextLine());

	}

	@Test
	public void test05_SimpleOneTarifThreePriceOneId() {
		String s = "Tarif 3 100 5 900 10 100000 15 \n1 0 0 0 2000";
		Scanner input = new Scanner(s);
		ByteArrayOutputStream outputba = new ByteArrayOutputStream();
		PrintStream output = new PrintStream(outputba);
		Bills.process(input, output);
		input.close();
		output.close();

		Scanner scanner = new Scanner(outputba.toString());
		assertTrue(scanner.hasNextLine());
		assertEquals("1 245", scanner.nextLine());
		assertFalse(scanner.hasNextLine());

	}

	@Test
	public void test06_SimpleOneTarifThreePriceTwoId() {
		String s = "Tarif 3 100 5 900 10 100000 15 \n1 0 0 0 2000 \n20 0 0 0 1750";
		Scanner input = new Scanner(s);
		ByteArrayOutputStream outputba = new ByteArrayOutputStream();
		PrintStream output = new PrintStream(outputba);
		Bills.process(input, output);
		input.close();
		output.close();

		Scanner scanner = new Scanner(outputba.toString());
		assertTrue(scanner.hasNextLine());
		assertEquals("1 245", scanner.nextLine());
		assertTrue(scanner.hasNextLine());
		assertEquals("20 208", scanner.nextLine());
		assertFalse(scanner.hasNextLine());

	}

	@Test
	public void test07_SimpleOneTarifThreePriceTwoIdMultiQuartal() {
		String s = "Tarif 3 100 5 900 10 100000 15 \n1 20 0 35 2000 \n20 0 150 50 1750";
		Scanner input = new Scanner(s);
		ByteArrayOutputStream outputba = new ByteArrayOutputStream();
		PrintStream output = new PrintStream(outputba);
		Bills.process(input, output);
		input.close();
		output.close();

		Scanner scanner = new Scanner(outputba.toString());
		assertTrue(scanner.hasNextLine());
		assertEquals("1 253", scanner.nextLine());
		assertTrue(scanner.hasNextLine());
		assertEquals("20 238", scanner.nextLine());
		assertFalse(scanner.hasNextLine());

	}

	@Test
	public void test08_SimpleCorrectRoundingUpTest() {
		String s = "Tarif 1 100000 5  \n1 0 0 0 50";
		Scanner input = new Scanner(s);
		ByteArrayOutputStream outputba = new ByteArrayOutputStream();
		PrintStream output = new PrintStream(outputba);
		Bills.process(input, output);
		input.close();
		output.close();

		Scanner scanner = new Scanner(outputba.toString());
		assertTrue(scanner.hasNextLine());
		assertEquals("1 3", scanner.nextLine()); // Ergibt 250 Rappen muss auf 3 CHF gerundet werden

		assertFalse(scanner.hasNextLine());
	}

	@Test
	public void test09_SimpleCorrectRoundingDownTest() {
		String s = "Tarif 1 100000 5  \n1 0 0 0 49";
		Scanner input = new Scanner(s);
		ByteArrayOutputStream outputba = new ByteArrayOutputStream();
		PrintStream output = new PrintStream(outputba);
		Bills.process(input, output);
		input.close();
		output.close();

		Scanner scanner = new Scanner(outputba.toString());
		assertTrue(scanner.hasNextLine());
		assertEquals("1 2", scanner.nextLine()); // Ergibt 245 Rappen muss auf 2 CHF gerundet werden.
		assertFalse(scanner.hasNextLine());
	}
	
	@Test
	public void test10_AllRoundToZeroTest() {
		String s = "Tarif 1 100000 5  \n1 0 0 0 9\n2 0 0 0 1\n3 1 1 1 1";
		Scanner input = new Scanner(s);
		ByteArrayOutputStream outputba = new ByteArrayOutputStream();
		PrintStream output = new PrintStream(outputba);
		Bills.process(input, output);
		input.close();
		output.close();

		Scanner scanner = new Scanner(outputba.toString());
		assertTrue(scanner.hasNextLine());
		assertEquals("1 0", scanner.nextLine());
		assertEquals("2 0", scanner.nextLine());
		assertEquals("3 0", scanner.nextLine());
		assertFalse(scanner.hasNextLine());
	}
	
	@Test
	public void test11_RoundingNotTooEarly() {
		String s = "Tarif 1 100000 1  \n3 4 3 20 23";
		Scanner input = new Scanner(s);
		ByteArrayOutputStream outputba = new ByteArrayOutputStream();
		PrintStream output = new PrintStream(outputba);
		Bills.process(input, output);
		input.close();
		output.close();

		Scanner scanner = new Scanner(outputba.toString());
		assertTrue(scanner.hasNextLine());
		assertEquals("3 1", scanner.nextLine()); // Mit allen Quartalen rundet der Gesamtbetrag nicht zu 0
		assertFalse(scanner.hasNextLine());
	}
	
	@Test
	public void test12_SimpleCorrectRoundingClearUpTest() {
		String s = "Tarif 1 100000 5  \n1 0 0 0 59";
		Scanner input = new Scanner(s);
		ByteArrayOutputStream outputba = new ByteArrayOutputStream();
		PrintStream output = new PrintStream(outputba);
		Bills.process(input, output);
		input.close();
		output.close();

		Scanner scanner = new Scanner(outputba.toString());
		assertTrue(scanner.hasNextLine());
		assertEquals("1 3", scanner.nextLine()); // Ergibt 295 Rappen muss auf 3 CHF gerundet werden.
		assertFalse(scanner.hasNextLine());
	}

	@Test
	public void test13_GeneralMultiTest_1() {
		String s = "Tarif 4 400 1 200 2 100 3 100000 5  \n19 0 0 0 100000";
		Scanner input = new Scanner(s);
		ByteArrayOutputStream outputba = new ByteArrayOutputStream();
		PrintStream output = new PrintStream(outputba);
		Bills.process(input, output);
		input.close();
		output.close();

		Scanner scanner = new Scanner(outputba.toString());
		assertTrue(scanner.hasNextLine());
		assertEquals("19 4976", scanner.nextLine());
		assertFalse(scanner.hasNextLine());

	}

	@Test
	public void test14_MultiTarifTest() {
		String s = "Tarif 4 400 1 200 2 100 3 100000 5 \n" + "19 0 0 0 100000 \n" + "Tarif 2 200 5 100000 10 \n"
				+ "234 2500 1000 2000 3000";

		Scanner input = new Scanner(s);
		ByteArrayOutputStream outputba = new ByteArrayOutputStream();
		PrintStream output = new PrintStream(outputba);
		Bills.process(input, output);
		input.close();
		output.close();

		Scanner scanner = new Scanner(outputba.toString());
		assertTrue(scanner.hasNextLine());
		assertEquals("19 4976", scanner.nextLine());
		assertTrue(scanner.hasNextLine());
		assertEquals("234 840", scanner.nextLine());
		assertFalse(scanner.hasNextLine());
	}

	@Test
	public void test15_BigZeroCostTarifTest() {
		String s = "Tarif 2 10 10 1000000 20 \n" + "1 10 0 0 0 \n" + "2 0 4 0 0\n" + "3 100 100 100 100\n"
				+ "4 100000 0 0 0\n" + "Tarif 1 100000 0\n" + "5 100 100 100 100\n" + "Tarif 2 1000 0 100000 10\n"
				+ "6 100 200 500 200\n" + "7 1000 1000 1000 1000";

		Scanner input = new Scanner(s);
		ByteArrayOutputStream outputba = new ByteArrayOutputStream();
		PrintStream output = new PrintStream(outputba);
		Bills.process(input, output);
		input.close();
		output.close();

		Scanner scanner = new Scanner(outputba.toString());

		assertTrue(scanner.hasNextLine());
		assertEquals("1 1", scanner.nextLine());

		assertTrue(scanner.hasNextLine());
		assertEquals("2 0", scanner.nextLine());

		assertTrue(scanner.hasNextLine());
		assertEquals("3 79", scanner.nextLine());

		assertTrue(scanner.hasNextLine());
		assertEquals("4 19999", scanner.nextLine());

		assertTrue(scanner.hasNextLine());
		assertEquals("5 0", scanner.nextLine());

		assertTrue(scanner.hasNextLine());
		assertEquals("6 0", scanner.nextLine());

		assertTrue(scanner.hasNextLine());
		assertEquals("7 300", scanner.nextLine());

		assertFalse(scanner.hasNextLine());

		scanner.close();

	}
	
	@Test
	public void test16_TarifTarifBig() {
		String s = "Tarif 2 10 10 1000000 20 \n"+ "Tarif 1 100000 5\n" + "5 100 100 100 100\n" + "Tarif 2 1000 15 100000 3\n"
				+ "6 100 200 500 200\n" + "7 1000 1000 1000 1000";

		Scanner input = new Scanner(s);
		ByteArrayOutputStream outputba = new ByteArrayOutputStream();
		PrintStream output = new PrintStream(outputba);
		Bills.process(input, output);
		input.close();
		output.close();

		Scanner scanner = new Scanner(outputba.toString());

		assertTrue(scanner.hasNextLine());
		assertEquals("5 20", scanner.nextLine());

		assertTrue(scanner.hasNextLine());
		assertEquals("6 150", scanner.nextLine());

		assertTrue(scanner.hasNextLine());
		assertEquals("7 240", scanner.nextLine());

		
		assertFalse(scanner.hasNextLine());

		scanner.close();

	}

	@Test
	public void test17_TarifAllFree() {
		String s = "Tarif 2 10 0 1000000 0 \n"+ "5 100 100 100 100\n" + "Tarif 2 1000 0 100000 0\n"
				+ "6 100 200 500 200\n" + "7 1000 1000 1000 1000";

		Scanner input = new Scanner(s);
		ByteArrayOutputStream outputba = new ByteArrayOutputStream();
		PrintStream output = new PrintStream(outputba);
		Bills.process(input, output);
		input.close();
		output.close();

		Scanner scanner = new Scanner(outputba.toString());

		assertTrue(scanner.hasNextLine());
		assertEquals("5 0", scanner.nextLine());

		assertTrue(scanner.hasNextLine());
		assertEquals("6 0", scanner.nextLine());

		assertTrue(scanner.hasNextLine());
		assertEquals("7 0", scanner.nextLine());

		
		assertFalse(scanner.hasNextLine());

		scanner.close();
	}
	
	@Test
	public void test18_OneTarifQuartersHitIntervals() {
		String s = "Tarif 4 100 10 200 100 300 1000 100000 10000\n1 100 200 300 400";
		Scanner input = new Scanner(s);
		ByteArrayOutputStream outputba = new ByteArrayOutputStream();
		PrintStream output = new PrintStream(outputba);
		Bills.process(input, output);
		input.close();
		output.close();

		Scanner scanner = new Scanner(outputba.toString());
		assertTrue(scanner.hasNextLine());
		assertEquals("1 43210", scanner.nextLine());
		assertFalse(scanner.hasNextLine());
	}
	
	@Test
	public void test19_OneTarifQuartersNearlyHitIntervals() {
		String s = "Tarif 4 100 10 100 100 100 1000 100000 10000\n1 99 199 299 399";
		Scanner input = new Scanner(s);
		ByteArrayOutputStream outputba = new ByteArrayOutputStream();
		PrintStream output = new PrintStream(outputba);
		Bills.process(input, output);
		input.close();
		output.close();

		// 996 = 100 + 100 + 100 + 696
		
		
		Scanner scanner = new Scanner(outputba.toString());
		assertTrue(scanner.hasNextLine());
		assertEquals("1 70710", scanner.nextLine());
		assertFalse(scanner.hasNextLine());
	}
	
	
	@Test
	public void test20_PiBill() {
		String s = "Tarif 4 100 1 400 10 100 100 100000 1000\n1 100 400 100 300";
		Scanner input = new Scanner(s);
		ByteArrayOutputStream outputba = new ByteArrayOutputStream();
		PrintStream output = new PrintStream(outputba);
		Bills.process(input, output);
		input.close();
		output.close();

		Scanner scanner = new Scanner(outputba.toString());
		assertTrue(scanner.hasNextLine());
		assertEquals("1 3141", scanner.nextLine());
		assertFalse(scanner.hasNextLine());
	}
}


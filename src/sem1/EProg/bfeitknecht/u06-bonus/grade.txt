NETHZ: bfeitknecht

points: 4.57

compile errors: NO
timeout: NO

test01_NumberOfRows: PASS
test02_NumberOfColsPerRow: PASS
test03_NumberOfColsPerRow: PASS
test04_SimplePutGet: PASS
test05_PutGiven01: PASS
test06_InvalidPutGet: PASS
test07_SimpleInit: PASS
test08_LongShapeInit: PASS
test09_TallShapeInit: PASS
test10_LinearTrivial: PASS
test11_InitLinear: PASS
test12_InitLinearTall: PASS
test13_AddGivenSimple: PASS
test14_AddGivenNegative: PASS
test15_AddGivenSizeMismatch01: FAIL
test16_AddGivenSizeMismatch02: FAIL
test17_AddUnaffected: PASS
test18_ReallyLongShape: PASS
test19_LargeTriangle: PASS
test20_AddDiagonalLinear: PASS
test21_InitNegative: PASS
test22_InitLinearNegative: PASS
test23_PutGivenNegative: PASS


Folgende Test-Datei wurde für die Bewertung verwendet:

import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

class GradingTriangleTest {

    @Test
    void test01_NumberOfRows() {
        Triangle t = new Triangle(6, 15);

        assertEquals(0, t.get(0, 0));
        assertEquals(0, t.get(1, 0));
        assertEquals(0, t.get(2, 0));
        assertEquals(0, t.get(3, 0));
        assertEquals(0, t.get(4, 0));
        assertEquals(0, t.get(5, 0));

    }

    @Test
    void test02_NumberOfColsPerRow() {
        final int Z = 16;
        final int S = 8;

        Triangle t = new Triangle(Z, S);
        for (int i = 0; i < t.rows.length; i++) {
            final int expected_num_cols = (i * (S - 1) / (Z - 1)) + 1;
            final int row_idx = i;
            for (int j = 0; j < expected_num_cols; j++) {
                final int col_idx = j;
                assertDoesNotThrow(() -> {
                    t.get(row_idx, col_idx);
                }, "Zugriff auf (" + i + "," + j + ") sollte nicht fehlschlagen (Länge = " + t.rows[row_idx].length + ")");
            }
        }
    }

    @Test
    void test03_NumberOfColsPerRow() {
        final int Z = 20;
        final int S = 2;

        Triangle t = new Triangle(Z, S);
        for (int i = 0; i < t.rows.length; i++) {
            final int expected_num_cols = (i * (S - 1) / (Z - 1)) + 1;
            final int row_idx = i;
            for (int j = 0; j < expected_num_cols; j++) {
                final int col_idx = j;
                assertDoesNotThrow(() -> {
                    t.get(row_idx, col_idx);
                }, "Zugriff auf (" + i + "," + j + ") sollte nicht fehlschlagen (Länge = " + t.rows[row_idx].length + ")");
            }
        }
    }

    @Test
    void test04_SimplePutGet() {
        Triangle t = new Triangle(2, 2);

        t.put(0, 0, 42);
        assertEquals(42, t.get(0, 0), "put()/get() verändert die Daten");
    }

    @Test
    void test05_PutGiven01() {
        Triangle t = new Triangle(12, 7);

        t.put(0, 0, 1);
        t.put(2, 1, 2);
        t.put(7, 3, 3);
        t.put(11, 4, 4);

        assertEquals(1, t.get(0, 0));
        assertEquals(2, t.get(2, 1));
        assertEquals(3, t.get(7, 3));
        assertEquals(4, t.get(11, 4));
        assertEquals(0, t.get(2, 0));
        assertEquals(0, t.get(5, 1));
        assertEquals(0, t.get(7, 2));
        assertEquals(0, t.get(11, 3));
        assertEquals(0, t.get(11, 5));
    }

    @Test
    void test06_InvalidPutGet() {
        Triangle t = new Triangle(2, 2);

        try {
            t.put(-2, -1, 12);
        } catch (Exception e) {
            // nop
        }

        assertEquals(0, t.get(0, 0), "put()/get() verändert die Daten nicht, wenn die Koordinaten ausserhalb des Dreiecks liegen");
        assertEquals(0, t.get(1, 0), "put()/get() verändert die Daten nicht, wenn die Koordinaten ausserhalb des Dreiecks liegen");
        assertEquals(0, t.get(1, 1), "put()/get() verändert die Daten nicht, wenn die Koordinaten ausserhalb des Dreiecks liegen");
    }

    @Test
    void test07_SimpleInit() {
        Triangle t = new Triangle(7, 7);
        int[] a = new int[28];
        for (int i = 0; i < a.length; i++) {
            a[i] = i;
        }

        t.init(a);

        assertEquals(0, t.get(0, 0));
        assertEquals(1, t.get(1, 0));
        assertEquals(2, t.get(1, 1));
        assertEquals(3, t.get(2, 0));
        assertEquals(4, t.get(2, 1));
        assertEquals(5, t.get(2, 2));
        assertEquals(6, t.get(3, 0));
        assertEquals(7, t.get(3, 1));
        assertEquals(8, t.get(3, 2));
        assertEquals(9, t.get(3, 3));
        assertEquals(10, t.get(4, 0));
        assertEquals(11, t.get(4, 1));
        assertEquals(12, t.get(4, 2));
        assertEquals(13, t.get(4, 3));
        assertEquals(14, t.get(4, 4));
        assertEquals(15, t.get(5, 0));
        assertEquals(16, t.get(5, 1));
        assertEquals(17, t.get(5, 2));
        assertEquals(18, t.get(5, 3));
        assertEquals(19, t.get(5, 4));
        assertEquals(20, t.get(5, 5));
        assertEquals(21, t.get(6, 0));
        assertEquals(22, t.get(6, 1));
        assertEquals(23, t.get(6, 2));
        assertEquals(24, t.get(6, 3));
        assertEquals(25, t.get(6, 4));
        assertEquals(26, t.get(6, 5));
        assertEquals(27, t.get(6, 6));
    }

    @Test
    void test08_LongShapeInit() {
        Triangle t = new Triangle(3, 10);
        int[] data = {
            42, 1, 2, 3, 4, 5, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1
        };
        t.init(data);

        assertEquals(42, t.get(0, 0), "Der aller erste Wert sollte 42 sein");
        assertEquals(1, t.get(1, 0), "Der erste Wert der zweiten Zeile sollte 1 sein");
        assertEquals(5, t.get(1, 4), "Der letzte Wert der zweiten Zeile sollte 5 sein");
        assertEquals(10, t.get(2, 0), "Der erste Wert der zweiten Zeile sollte 10 sein");
        assertEquals(1, t.get(2, 9), "Der letzte Wert der zweiten Zeile sollte 1 sein");
    }

    @Test
    void test09_TallShapeInit() {
        Triangle t = new Triangle(10, 3);
        int[] data = {
            10, 9, 8, 7, 6, 5, 5, 4, 4, 3, 3, 2, 2, 1, 1, 42
        };
        t.init(data);

        assertEquals(10, t.get(0, 0), "Der aller erste Wert sollte 10 sein");
        assertEquals(1, t.get(9, 0), "Der letzte Wert der ersten Spalte sollte 1 sein");
        assertEquals(5, t.get(5, 1), "Der erste Wert der zweiten Spalte sollte 5 sein");
        assertEquals(1, t.get(9, 1), "Der letzte Wert der zweiten Spalte sollte 1 sein");
        assertEquals(42, t.get(9, 2), "Der letzte Wert der dritten Spalte sollte 42 sein");
    }

    @Test
    void test10_LinearTrivial() {
        Triangle t = new Triangle(8, 7);
        int[] a = new int[29];

        int[] r = t.linear();

        assertArrayEquals(a, r);
    }

    @Test
    void test11_InitLinear() {
        Triangle t = new Triangle(8, 7);
        int[] a = new int[29];
        for (int i = 0; i < a.length; i++) {
            a[i] = i;
        }

        t.init(a);
        int[] r = t.linear();

        assertArrayEquals(a, r);
    }

    @Test
    void test12_InitLinearTall() {
        Triangle t = new Triangle(13, 3);
        int[] a = new int[21];
        for (int i = 0; i < a.length; i++) {
            a[i] = i;
        }

        t.init(a);
        int[] r = t.linear();

        assertArrayEquals(a, r);
    }

    @Test
    void test13_AddGivenSimple() {
        Triangle t = new Triangle(3, 3);
        Triangle s = new Triangle(3, 3);

        s.put(0, 0, 1);
        s.put(1, 0, 1);
        s.put(1, 1, 1);
        s.put(2, 0, 1);
        s.put(2, 1, 1);
        s.put(2, 2, 1);

        t.add(s);

        assertEquals(1, t.get(0, 0));
        assertEquals(1, t.get(1, 0));
        assertEquals(1, t.get(1, 1));
        assertEquals(1, t.get(2, 0));
        assertEquals(1, t.get(2, 1));
        assertEquals(1, t.get(2, 2));
    }

    @Test
    void test14_AddGivenNegative() {
        Triangle t = new Triangle(5, 5);
        Triangle s = new Triangle(5, 5);

        int[] a = new int[15];
        int[] b = new int[15];
        for (int i = 0; i < a.length; i++) {
            a[i] = i;
            b[i] = -1;
        }

        t.init(a);
        s.init(b);

        t.add(s);

        assertEquals(-1, t.get(0, 0));
        assertEquals(0, t.get(1, 0));
        assertEquals(1, t.get(1, 1));
        assertEquals(2, t.get(2, 0));
        assertEquals(3, t.get(2, 1));
        assertEquals(4, t.get(2, 2));
        assertEquals(5, t.get(3, 0));
        assertEquals(6, t.get(3, 1));
        assertEquals(7, t.get(3, 2));
        assertEquals(8, t.get(3, 3));
        assertEquals(9, t.get(4, 0));
        assertEquals(10, t.get(4, 1));
        assertEquals(11, t.get(4, 2));
        assertEquals(12, t.get(4, 3));
        assertEquals(13, t.get(4, 4));
    }

    @Test
    void test15_AddGivenSizeMismatch01() {
        Triangle t = new Triangle(5, 5);
        int[] a = new int[15];
        for (int i = 0; i < a.length; i++) {
            a[i] = i;
        }
        t.init(a);

        Triangle s = new Triangle(7, 3);
        int[] b = new int[12];
        for (int i = 0; i < b.length; i++) {
            b[i] = i;
        }
        s.init(b);

        t.add(s);

        assertEquals(0, t.get(0, 0));
        assertEquals(2, t.get(1, 0));
        assertEquals(2, t.get(1, 1));
        assertEquals(5, t.get(2, 0));
        assertEquals(4, t.get(2, 1));
        assertEquals(5, t.get(2, 2));
        assertEquals(9, t.get(3, 0));
        assertEquals(11, t.get(3, 1));
        assertEquals(8, t.get(3, 2));
        assertEquals(9, t.get(3, 3));
        assertEquals(15, t.get(4, 0));
        assertEquals(17, t.get(4, 1));
        assertEquals(12, t.get(4, 2));
        assertEquals(13, t.get(4, 3));
        assertEquals(14, t.get(4, 4));
    }

    @Test
    void test16_AddGivenSizeMismatch02() {
        Triangle t = new Triangle(5, 2);
        int[] a = new int[6];
        for (int i = 0; i < a.length; i++) {
            a[i] = i;
        }
        t.init(a);

        Triangle s = new Triangle(2, 2);
        int[] b = new int[]{1, 2, 3};
        s.init(b);

        t.add(s);

        assertEquals(1, t.get(0, 0));
        assertEquals(3, t.get(1, 0));
        assertEquals(2, t.get(2, 0));
        assertEquals(3, t.get(3, 0));
        assertEquals(4, t.get(4, 0));
        assertEquals(5, t.get(4, 1));

    }

    @Test
    void test17_AddUnaffected() {
        Triangle t = new Triangle(3, 3);
        Triangle z = new Triangle(3, 3);

        t.init(new int[]{
            1, 2, 3, 4, 5, 6
        });

        z.init(new int[]{
            0, 0, 3, 4, 5, 6
        });

        t.add(z);

        assertEquals(1, t.get(0, 0), "Index 0,0 sollte nicht verändert sein");
        assertEquals(2, t.get(1, 0), "Index 1,0 sollte nicht verändert sein");
        assertEquals(6, t.get(1, 1), "Index 1,1 sollte verändert sein");
        assertEquals(12, t.get(2, 2), "Index 2,2 sollte verändert sein");
    }


    @Test
    void test18_ReallyLongShape() {
        Triangle t = new Triangle(2, 50);

        int[] a = new int[51];
        for (int i = 0; i < a.length; i++) {
            a[i] = i;
        }

        t.init(a);

        assertEquals(50, t.get(1, 49), "Index 1,49 ist das letzte Element und sollte 50 sein");
    }

    @Test
    void test19_LargeTriangle() {
        Triangle t = new Triangle(20, 20);

        int[] data = {
            0,
            0, 0,
            0, 0, 0,
            0, 0, 0, 0,
            0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 1, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        };
        t.init(data);

        assertEquals(0, t.get(0, 0), "Index 0,0 sollte den Wert 0 haben");
        assertEquals(1, t.get(8, 3), "Index 8,3 sollte den Wert 1 haben");
        assertEquals(8, t.get(15, 6), "Index 15,6 sollte den Wert 8 haben");
        assertEquals(0, t.get(19, 16), "Index 19,16 sollte den Wert 0 haben");
    }

    @Test
    void test20_AddDiagonalLinear() {
        Triangle t = new Triangle(20, 20);

        Triangle s = new Triangle(20, 20);
        int[] data = {
            1,
            0, 1,
            0, 0, 1,
            0, 0, 0, 1,
            0, 0, 0, 0, 1,
            0, 0, 0, 0, 0, 1,
            0, 0, 0, 0, 0, 0, 1,
            0, 0, 0, 0, 0, 0, 0, 1,
            0, 0, 0, 0, 0, 0, 0, 0, 1,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
        };
        s.init(data);

        t.add(s);

        assertArrayEquals(data, t.linear(), "t.linear() entspricht nicht data!");
    }

    @Test
    void test21_InitNegative() {
        Triangle t = new Triangle(7, 7);
        int[] data = new int[28];
        for (int i = 0; i < data.length; i++) {
            data[i] = -i;
        }

        t.init(data);

        assertEquals(0, t.get(0, 0));
        assertEquals(-1, t.get(1, 0));
        assertEquals(-2, t.get(1, 1));
        assertEquals(-3, t.get(2, 0));
        assertEquals(-10, t.get(4, 0));
        assertEquals(-11, t.get(4, 1));
        assertEquals(-12, t.get(4, 2));
        assertEquals(-13, t.get(4, 3));
        assertEquals(-14, t.get(4, 4));
        assertEquals(-24, t.get(6, 3));
        assertEquals(-25, t.get(6, 4));
        assertEquals(-26, t.get(6, 5));
        assertEquals(-27, t.get(6, 6));
    }

    @Test
    void test22_InitLinearNegative() {
        Triangle t = new Triangle(8, 7);
        int[] data = new int[29];
        for (int i = 0; i < data.length; i++) {
            data[i] = -i;
        }

        t.init(data);
        int[] r = t.linear();

        assertArrayEquals(data, r, "t.linear() entspricht nicht data!");
    }

    @Test
    void test23_PutGivenNegative() {
        Triangle t = new Triangle(12, 7);

        t.put(2, 1, -1);
        t.put(4, 1, -2);
        t.put(7, 0, -3);
        t.put(11, 2, -4);

        assertEquals(-1, t.get(2, 1), "Dieses Element sollte verändert sein");
        assertEquals(-2, t.get(4, 1), "Dieses Element sollte verändert sein");
        assertEquals(-3, t.get(7, 0), "Dieses Element sollte verändert sein");
        assertEquals(-4, t.get(11, 2), "Dieses Element sollte verändert sein");
        assertEquals(0, t.get(2, 0), "Dieses Element sollte nicht verändert sein");
        assertEquals(0, t.get(3, 1), "Dieses Element sollte nicht verändert sein");
        assertEquals(0, t.get(7, 2), "Dieses Element sollte nicht verändert sein");
        assertEquals(0, t.get(11, 1), "Dieses Element sollte nicht verändert sein");
        assertEquals(0, t.get(11, 5), "Dieses Element sollte nicht verändert sein");
    }
}
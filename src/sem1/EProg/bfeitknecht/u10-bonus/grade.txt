NETHZ: bfeitknecht

Total Points: 0
Total Percentage: 0

Nontrivial Tests: 0
Trivial Tests: 1
Total Tests (trivial only counts if non-trivial >0): 0

compile errors: NO
nondeterministic: NO
timeout: YES

testA01Given: FAIL
testA02Given: FAIL
testA03Given: FAIL
testA04Basic: FAIL
testA05IDsNotSorted: FAIL
testA06NegativeIDs: FAIL
testA07MultipleDeclasses: FAIL
testA08DeclassChain: FAIL
testA09SetHealthChain: FAIL
testA10Related: FAIL
testA11RelatedChain: FAIL
testA12NotFound: FAIL
testA13NotFoundIDsNotSorted: FAIL
testB01Given: FAIL
testB02Given: FAIL
testB03Basic: FAIL
testB04NegativeIDs: FAIL
testB05OneElement: PASS
testB06Disjoint: FAIL
testB07AllJoined: FAIL
testB08NotFoundAny: FAIL
testB09NotFoundJustOne: FAIL
testB10MultiLink: FAIL
testB11LinkedMultipleTimes: FAIL
testB12ListNotSorted: FAIL


Grading Hinweis: Der 'Trivial' Test testB05OneElement wird nur als 'bestanden' gezaehlt, wenn mindestens ein 
'Nontrivial' Test bestanden wurde.

Folgende Test-Datei wurde fÃ¼r die Bewertung verwendet:

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertThrows;

import java.util.List;

import org.junit.jupiter.api.Test;

public class GradingDatabaseTest {
	
	@Test
	public void testA01Given() {
		Database database = new Database();
		ItemFactory factory = database.getItemFactory();
		
		database.add(factory.createItem(new Level(List.of(1,2)),      0, 20, 100));
		Item item = factory.createItem(new Level(List.of(2,3)),       1, 30, 109);		
		database.add(item);
		Item declass = factory.createDeclass(new Level(List.of(5,6)), 2, 1);
		
		assertNotNull(item);
		assertNotNull(declass);
		
		assertEquals(2, declass.getID());
		assertEquals(30, declass.getAge());
		assertEquals(109, declass.getHealth());
		
		item.setHealth(40);
		
		assertEquals(40, item.getHealth());
		assertEquals(40, declass.getHealth());
	}
	
	@Test
	public void testA02Given() {
		Database database = new Database();
		ItemFactory factory = database.getItemFactory();
		
		database.add(factory.createItem(new Level(List.of(1,2)), 0, 20, 100));
		database.add(factory.createItem(new Level(List.of(2,3)), 1, 30, 109));
		database.add(factory.createDeclass(new Level(List.of(5,6)), 2, 1));
		Item declass2 = factory.createDeclass(new Level(List.of(4,6)), 3, 2);
		
		assertNotNull(declass2);
		
		assertEquals(3, declass2.getID());
		assertEquals(30, declass2.getAge());
		assertEquals(109, declass2.getHealth());
	}
	
	@Test
	public void testA03Given() {
		Database database = new Database();
		ItemFactory factory = database.getItemFactory();
		
		database.add(factory.createItem(new Level(List.of(1,2)), 0, 20, 100));
		database.add(factory.createItem(new Level(List.of(1,2,3,4)), 1, 30, 109));
		database.add(factory.createDeclass(new Level(List.of(5,6)), 2, 1));
		assertThrows(
				IllegalArgumentException.class,
		        () -> factory.createDeclass(new Level(List.of(4,6)), 3, 2)
		);
	}
	
	@Test
	public void testA04Basic() {
		Database database = new Database();
		ItemFactory factory = database.getItemFactory();
		
		database.add(factory.createItem(new Level(List.of(12, 5)), 0, 35, 150));
		Item item = factory.createItem(new Level(List.of(8, 4, 6, -20)), 1, 15, 120);
		database.add(item);
		Item declass = factory.createDeclass(new Level(List.of(2,1,3,7)), 2, 1);
		database.add(declass);
		
		item.setHealth(87);
		assertEquals(87, item.getHealth());
		assertEquals(87, declass.getHealth());
	}
	
	@Test
	public void testA05IDsNotSorted() {
		Database database = new Database();
		ItemFactory factory = database.getItemFactory();
		
		database.add(factory.createItem(new Level(List.of(4, 7)), 5, 60, 90));
		database.add(factory.createItem(new Level(List.of(5, 8)), 1, 75, 100));
		database.add(factory.createItem(new Level(List.of(6, 9)), 2, 80, 50));
		
		Item declass = factory.createDeclass(new Level(List.of(12)), 7, 5);
		database.add(declass);
		
		assertNotNull(declass);
		assertEquals(60, declass.getAge());
		assertEquals(90, declass.getHealth());
	}
	
	@Test
	public void testA06NegativeIDs() {
		Database database = new Database();
		ItemFactory factory = database.getItemFactory();
		
		database.add(factory.createItem(new Level(List.of(4, 7)), -1, 60, 90));
		database.add(factory.createItem(new Level(List.of(5, 8)), -2, 75, 100));
		database.add(factory.createItem(new Level(List.of(6, 9)), -3, 80, 50));
		
		Item declass = factory.createDeclass(new Level(List.of(12)), 7, -1);
		database.add(declass);
		
		assertNotNull(declass);
		assertEquals(60, declass.getAge());
		assertEquals(90, declass.getHealth());
	}
	
	@Test
	public void testA07MultipleDeclasses() {
		Database database = new Database();
		ItemFactory factory = database.getItemFactory();
		
		database.add(factory.createItem(new Level(List.of(4, 7)), 0, 60, 90));
		database.add(factory.createItem(new Level(List.of(5, 8)), 1, 75, 100));
		database.add(factory.createItem(new Level(List.of(6, 9)), 2, 80, 42));
		
		Item declass = factory.createDeclass(new Level(List.of(12)), 3, 0);
		database.add(declass);
		Item declass2 = factory.createDeclass(new Level(List.of(14)), 4, 0);
		database.add(declass2);
		
		assertNotNull(declass);
		assertEquals(60, declass.getAge());
		assertEquals(90, declass.getHealth());
		
		assertNotNull(declass2);
		assertEquals(60, declass2.getAge());
		assertEquals(90, declass2.getHealth());
	}
	
	@Test
	public void testA08DeclassChain() {
		Database database = new Database();
		ItemFactory factory = database.getItemFactory();
		
		database.add(factory.createItem(new Level(List.of(4, 7)), 0, 60, 90));
		database.add(factory.createItem(new Level(List.of(5, 8)), 1, 75, 100));
		database.add(factory.createItem(new Level(List.of(6, 9)), 2, 80, 1337));
		
		Item declass = factory.createDeclass(new Level(List.of(12)), 3, 1);
		database.add(declass);
		Item declass2 = factory.createDeclass(new Level(List.of(14)), 4, 3);
		database.add(declass2);
		
		assertNotNull(declass);
		assertEquals(75, declass.getAge());
		assertEquals(100, declass.getHealth());
		
		assertNotNull(declass2);
		assertEquals(75, declass2.getAge());
		assertEquals(100, declass2.getHealth());
	}
	
	@Test
	public void testA09SetHealthChain() {
		Database database = new Database();
		ItemFactory factory = database.getItemFactory();
		
		Item i = factory.createItem(new Level(List.of(4, 7)), 0, 60, 90);
		database.add(i);
		database.add(factory.createItem(new Level(List.of(5, 8)), 1, 75, 100));
		database.add(factory.createItem(new Level(List.of(6, 9)), 2, 80, 50));
		
		Item declass = factory.createDeclass(new Level(List.of(12)), 3, 0);
		database.add(declass);
		Item declass2 = factory.createDeclass(new Level(List.of(14)), 4, 3);
		database.add(declass2);
		
		assertNotNull(declass);
		assertNotNull(declass2);
		
		i.setHealth(35);
		assertEquals(declass.getHealth(), 35);
		assertEquals(declass2.getHealth(), 35);
	}
	
	@Test
	public void testA10Related() {
		Database database = new Database();
		ItemFactory factory = database.getItemFactory();
		
		database.add(factory.createItem(new Level(List.of(4, 7)), 0, 60, 90));
		database.add(factory.createItem(new Level(List.of(5, 8)), 1, 75, 100));
		database.add(factory.createItem(new Level(List.of(6, 9)), 2, 80, 50));
		
		assertThrows(
				IllegalArgumentException.class,
		        () -> factory.createDeclass(new Level(List.of(3, 3, 3, 2, 1, 0, 3)), 3, 2)
		);
	}
	
	@Test
	public void testA11RelatedChain() {
		Database database = new Database();
		ItemFactory factory = database.getItemFactory();
		
		database.add(factory.createItem(new Level(List.of(4, 7)), 0, 60, 90));
		database.add(factory.createItem(new Level(List.of(5, 8)), 1, 75, 100));
		database.add(factory.createItem(new Level(List.of(6, 9)), 2, 80, 178));
		database.add(factory.createDeclass(new Level(List.of(12)), 3, 2));
		
		assertThrows(
				IllegalArgumentException.class,
		        () -> factory.createDeclass(new Level(List.of(15)), 4, 3)
		);
	}
	
	@Test
	public void testA12NotFound() {
		Database database = new Database();
		ItemFactory factory = database.getItemFactory();
		
		database.add(factory.createItem(new Level(List.of(4, 7)), 0, 60, 90));
		database.add(factory.createItem(new Level(List.of(5, 8)), 1, 75, 100));
		database.add(factory.createItem(new Level(List.of(6, 9)), 2, 80, 50));
		
		assertThrows(
				IllegalArgumentException.class,
		        () -> factory.createDeclass(new Level(List.of(16)), 3, 4)
		);
	}
	
	@Test
	public void testA13NotFoundIDsNotSorted() {
		Database database = new Database();
		ItemFactory factory = database.getItemFactory();
		
		database.add(factory.createItem(new Level(List.of(4, 7)), 4, 60, 90));
		database.add(factory.createItem(new Level(List.of(5, 8)), 0, 75, 100));
		database.add(factory.createItem(new Level(List.of(6, 9)), 9, 80, 50));
		
		assertThrows(
				IllegalArgumentException.class,
		        () -> factory.createDeclass(new Level(List.of(16)), 3, 2)
		);
	}
	
	@Test
	public void testB01Given() {
		Database database = new Database();
		ItemFactory factory = database.getItemFactory();
		
		Item item1 = factory.createItem(new Level(List.of(2,3)), 1, 30, 109);
		Item item2 = factory.createItem(new Level(List.of(2,3)), 2, 20, 50);
		Item item3 = factory.createItem(new Level(List.of(2,3)), 3, 23, 45);
		Item item4 = factory.createItem(new Level(List.of(2,3)), 4, 54, 89);
		
		database.add(item1);
		database.add(item2);
		database.add(item3);
		database.add(item4);
		
		database.createLink(List.of(1,2,3));
		
		assertEquals(109, item1.getHealth());
		assertEquals(50, item2.getHealth());
		assertEquals(45, item3.getHealth());
		assertEquals(89, item4.getHealth());
		
		item2.setHealth(0);
		
		assertEquals(0, item1.getHealth());
		assertEquals(0, item2.getHealth());
		assertEquals(0, item3.getHealth());
		assertEquals(89, item4.getHealth());
	}
	
	@Test
	public void testB02Given() {
		Database database = new Database();
		ItemFactory factory = database.getItemFactory();
		
		Item item1 = factory.createItem(new Level(List.of(2,3)), 1, 30, 109);
		Item item2 = factory.createItem(new Level(List.of(2,3)), 2, 20, 50);
		Item item3 = factory.createItem(new Level(List.of(2,3)), 3, 23, 45);
		Item item4 = factory.createItem(new Level(List.of(2,3)), 4, 54, 89);
		
		database.add(item1);
		database.add(item2);
		database.add(item3);
		database.add(item4);
		
		database.createLink(List.of(1,2));
		database.createLink(List.of(3,4));
		database.createLink(List.of(1,4));
		
		item2.setHealth(0);
		
		assertEquals(0, item1.getHealth());
		assertEquals(0, item2.getHealth());
		assertEquals(0, item3.getHealth());
		assertEquals(0, item4.getHealth());
	}
	
	@Test
	public void testB03Basic() {
		Database database = new Database();
		ItemFactory factory = database.getItemFactory();
		
		Item item1 = factory.createItem(new Level(List.of(2,3)), 1, 30, 109);
		Item item2 = factory.createItem(new Level(List.of(2,3)), 2, 20, 50);
		Item item3 = factory.createItem(new Level(List.of(4,7)), 3, 100, 35);
		
		database.add(item1);
		database.add(item2);
		database.add(item3);
		database.createLink(List.of(2,3));
		
		item3.setHealth(100);
		assertEquals(109, item1.getHealth());
		assertEquals(100, item2.getHealth());
		assertEquals(100, item3.getHealth());
	}
	
	@Test
	public void testB04NegativeIDs() {
		Database database = new Database();
		ItemFactory factory = database.getItemFactory();
		
		Item i1 = factory.createItem(new Level(List.of(9, 9, 8)), -1, 67, 100);
		Item i2 = factory.createItem(new Level(List.of(9, 9, 7)), -2, 68, 90);
		Item i3 = factory.createItem(new Level(List.of(14, 2, 5)), -3, 69, 1000);
		
		database.add(i1);
		database.add(i2);
		database.add(i3);
		
		database.createLink(List.of(-1, -3));
		
		i1.setHealth(42);
		assertEquals(42, i3.getHealth());
	}
	
	@Test
	public void testB05OneElement() {
		Database database = new Database();
		ItemFactory factory = database.getItemFactory();
		
		Item i1 = factory.createItem(new Level(List.of(9, 9, 8)), 1, 67, 100);
		Item i2 = factory.createItem(new Level(List.of(9, 9, 7)), 2, 68, 90);
		Item i3 = factory.createItem(new Level(List.of(14, 2, 5)), 3, 69, 1000);
		
		database.add(i1);
		database.add(i2);
		database.add(i3);
		
		database.createLink(List.of(1));
		database.createLink(List.of(2));
		
		i1.setHealth(120);
		i2.setHealth(0);
		assertEquals(120, i1.getHealth());
		assertEquals(0, i2.getHealth());
		assertEquals(1000, i3.getHealth());
	}
	
	@Test
	public void testB06Disjoint() {
		Database database = new Database();
		ItemFactory factory = database.getItemFactory();
		
		Item i1 = factory.createItem(new Level(List.of(1, 2)), 0, 36, 10);
		Item i2 = factory.createItem(new Level(List.of(1, 3)), 1, 49, 20);
		Item i3 = factory.createItem(new Level(List.of(1, 4)), 2, 64, 30);
		Item i4 = factory.createItem(new Level(List.of(1, 5)), 3, 81, 40);
		
		database.add(i1);
		database.add(i2);
		database.add(i3);
		database.add(i4);
		
		database.createLink(List.of(2, 3));
		database.createLink(List.of(0, 1));
		
		i2.setHealth(15);
		i3.setHealth(35);
		assertEquals(15, i1.getHealth());
		assertEquals(15, i2.getHealth());
		assertEquals(35, i3.getHealth());
		assertEquals(35, i4.getHealth());
	}
	
	@Test
	public void testB07AllJoined() {
		Database database = new Database();
		ItemFactory factory = database.getItemFactory();
		
		Item i1 = factory.createItem(new Level(List.of(1, 2)), 0, 36, 10);
		Item i2 = factory.createItem(new Level(List.of(1, 3)), 1, 49, 20);
		Item i3 = factory.createItem(new Level(List.of(1, 4)), 2, 64, 30);
		Item i4 = factory.createItem(new Level(List.of(1, 5)), 3, 81, 40);
		
		database.add(i1);
		database.add(i2);
		database.add(i3);
		database.add(i4);
		
		database.createLink(List.of(2, 3));
		database.createLink(List.of(0, 1));
		database.createLink(List.of(0, 3));
		
		i3.setHealth(35);
		assertEquals(35, i1.getHealth());
		assertEquals(35, i2.getHealth());
		assertEquals(35, i3.getHealth());
		assertEquals(35, i4.getHealth());
	}
	
	@Test
	public void testB08NotFoundAny() {
		Database database = new Database();
		ItemFactory factory = database.getItemFactory();
		
		Item i1 = factory.createItem(new Level(List.of(1, 2)), 7, 36, 10);
		Item i2 = factory.createItem(new Level(List.of(1, 3)), 4, 49, 20);
		
		database.add(i1);
		database.add(i2);
				
		assertThrows(
				IllegalArgumentException.class,
                () -> 		database.createLink(List.of(0, 1))
        );
	}
	
	@Test
	public void testB09NotFoundJustOne() {
		Database database = new Database();
		ItemFactory factory = database.getItemFactory();
		
		Item i1 = factory.createItem(new Level(List.of(1, 2)), 0, 36, 10);
		Item i2 = factory.createItem(new Level(List.of(1, 3)), 1, 49, 20);
		Item i3 = factory.createItem(new Level(List.of(1, 4)), 2, 64, 30);
		
		database.add(i1);
		database.add(i2);
		database.add(i3);
		
		assertThrows(
				IllegalArgumentException.class,
                () -> 		database.createLink(List.of(0, 1, 3))
        );
	}
	
	@Test
	public void testB10MultiLink() {
		Database database = new Database();
		ItemFactory factory = database.getItemFactory();
		
		Item i1 = factory.createItem(new Level(List.of(1, 2)), 0, 36, 10);
		Item i2 = factory.createItem(new Level(List.of(1, 3)), 1, 49, 20);
		Item i3 = factory.createItem(new Level(List.of(1, 4)), 2, 64, 30);
		Item i4 = factory.createItem(new Level(List.of(1, 5)), 3, 81, 40);
		Item i5 = factory.createItem(new Level(List.of(1, 6)), 4, 100, 50);
		Item i6 = factory.createItem(new Level(List.of(1, 7)), 5, 121, 60);
		
		database.add(i1);
		database.add(i2);
		database.add(i3);
		database.add(i4);
		database.add(i5);
		database.add(i6);
		
		database.createLink(List.of(0, 5));
		database.createLink(List.of(1, 2, 4));
		
		i6.setHealth(17);
		assertEquals(17, i1.getHealth());
		assertEquals(17, i6.getHealth());
		i3.setHealth(95);
		assertEquals(95, i2.getHealth());
		assertEquals(95, i3.getHealth());
		assertEquals(95, i5.getHealth());
		
		database.createLink(List.of(1, 5));
		assertEquals(17, i1.getHealth());
		assertEquals(17, i6.getHealth());
		
		i3.setHealth(95);
		assertEquals(95, i2.getHealth());
		assertEquals(95, i3.getHealth());
		assertEquals(95, i5.getHealth());
		assertEquals(40, i4.getHealth());
		assertEquals(95, i6.getHealth());
		assertEquals(95, i1.getHealth());
	}
	
	@Test
	public void testB11LinkedMultipleTimes() {
		Database database = new Database();
		ItemFactory factory = database.getItemFactory();
		
		Item i1 = factory.createItem(new Level(List.of(100)), 0, 55, 100);
		Item i2 = factory.createItem(new Level(List.of(101)), 1, 55, 102);
		
		database.add(i1);
		database.add(i2);
		
		database.createLink(List.of(0, 1));
		i2.setHealth(200);
		assertEquals(200, i1.getHealth());
		assertEquals(200, i2.getHealth());
		database.createLink(List.of(0, 1));
		assertEquals(200, i1.getHealth());
		assertEquals(200, i2.getHealth());
	}
	
	@Test
	public void testB12ListNotSorted() {
		Database database = new Database();
		ItemFactory factory = database.getItemFactory();
		
		Item i1 = factory.createItem(new Level(List.of(100)), 0, 55, 100);
		Item i2 = factory.createItem(new Level(List.of(101)), 1, 55, 102);
		Item i3 = factory.createItem(new Level(List.of(102)), 2, 55, 104);
		
		database.add(i1);
		database.add(i2);
		database.add(i3);
		
		database.createLink(List.of(1, 2, 0));
		i2.setHealth(200);
		assertEquals(200, i1.getHealth());
		assertEquals(200, i2.getHealth());
		assertEquals(200, i3.getHealth());
	}
}